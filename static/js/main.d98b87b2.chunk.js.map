{"version":3,"sources":["components/About.js","components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btntext","setBtnText","className","id","style","type","onClick","console","log","Navbar","props","mode","href","title","to","aboutText","toggleMode","role","for","Textform","text","setText","heading","htmlFor","value","onChange","event","target","rows","newtext","toUpperCase","showAlert","toLowerCase","i","length","document","getElementById","select","navigator","clipboard","writeText","split","join","defaultProps","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","setInterval","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d98b87b2.chunk.js","sourcesContent":["import React,{useState} from 'react'\n\nexport default function About() {\n    const [myStyle, setMyStyle] = useState({\n        color: 'white',\n        backgroundColor: 'black'\n    })\n\n    var [btntext,setBtnText] = useState(\"Enable Light Mode\")\n\n    var toggleStyle =()=>{\n        if(myStyle.color ==='white'){\n            setMyStyle({\n\n                color: 'black',\n                backgroundColor: 'white'\n            })\n            setBtnText('ENABLE dark mode')\n            console.log('dark')\n        }\n        else{\n            setMyStyle({\n                color: 'white',\n                backgroundColor: 'black'\n            })\n            setBtnText('ENABLE light mode')\n            console.log('light')\n        }\n    }\n    return (\n        <div className='container'>\n            <h1 className='my-5'>About us</h1>\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\n  <div className=\"accordion-item\" style={myStyle}>\n    <h2 className=\"accordion-header\" id=\"headingOne\">\n      <button className=\"accordion-button\" style={myStyle}type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n        Accordion Item #1\n      </button>\n    </h2>\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n      <div className=\"accordion-body\" style={myStyle}>\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n      </div>\n    </div>\n  </div>\n  <div className=\"accordion-item\" style={myStyle}>\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n        Accordion Item #2\n      </button>\n    </h2>\n    <div id=\"collapseTwo\" style={myStyle} className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n      <div className=\"accordion-body\" style={myStyle}>\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n      </div>\n    </div>\n  </div>\n  <div className=\"accordion-item\" style={myStyle}>\n    <h2 className=\"accordion-header\" id=\"headingThree\">\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n        Accordion Item #3\n      </button>\n    </h2>\n    <div id=\"collapseThree\" style={myStyle} className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n      <div className=\"accordion-body\" style={myStyle}>\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n      </div>\n    </div>\n  </div>\n</div>\n<button type=\"button\" onClick={toggleStyle} className=\"btn btn-warning my-3\">{btntext}</button>\n        </div>\n    )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\nexport default function Navbar(props) {\n    return (\n        <div>\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n  <div className=\"container-fluid\">\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li className=\"nav-item\">\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\n        </li>\n        <li className=\"nav-item\">\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n        </li>\n        {/* <li className=\"nav-item dropdown\">\n          <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n            Dropdown\n          </a>\n          <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n            <li><a className=\"dropdown-item\" href=\"#\">Action</a></li>\n            <li><a className=\"dropdown-item\" href=\"#\">Another action</a></li>\n            <li><hr className=\"dropdown-divider\"/></li>\n            <li><a className=\"dropdown-item\" href=\"#\">fsfdg</a></li>\n          </ul>\n        </li>\n        <li className=\"nav-item\">\n          <a className=\"nav-link disabled\">Disabled</a>\n        </li> */}\n      </ul>\n      {/* <form className=\"d-flex\">\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n      </form> */}\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\n        <label className=\"form-check-label\" for=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\n      </div>\n    </div>\n  </div>\n</nav>\n        </div>\n    )\n}\n\nNavbar.propTypes={\n    title:PropTypes.string.isRequired,\n    aboutText:PropTypes.string\n}\n\nNavbar.defaultProps={\n    title:'set title here',\n    aboutText:'about text here'\n}","import React,{useState} from 'react'\n\nexport default function Textform(props) {\n    const handleOnChange= (event)=>{\n        console.log('onchange')\n        setText(event.target.value)\n    }\n\n    const handleUpClick= ()=>{\n        console.log('uppercase was clicked'+text)\n        let newtext= text.toUpperCase()\n        setText(newtext)\n        props.showAlert('converted into uppercase','success')\n    }\n    const handleLoClick= ()=>{\n        console.log('uppercase was clicked'+text)\n        let newtext= text.toLowerCase()\n        setText(newtext)\n    }\n    const handleCopyClick= ()=>{\n        //console.log('uppercase was clicked'+text)\n        let newtext= document.getElementById('box')\n        newtext.select()\n        navigator.clipboard.writeText(newtext.value)\n    }\n    const handleSpacesClick= ()=>{\n        //console.log('uppercase was clicked'+text)\n        let newtext= text.split(/[ ]+/);//here regex is used\n        setText(newtext.join(\" \"))\n    }\n    const handleInClick= ()=>{\n        // console.log('uppercase was clicked'+text)\n        let newtext=''\n        for(var i=0;i<text.length;i++){\n            if (text[i].toUpperCase() === text[i]){\n                newtext+=text[i].toLowerCase()\n            }\n            else if (text[i].toLowerCase() === text[i]){\n                newtext+=text[i].toUpperCase()\n            }\n        }\n        \n        setText(newtext)\n    }\n\n    const [text,setText]= useState('Enter text Here')\n    //text=\"new text\"; wrong way to change the state\n    //setText('new text'); Correct way to change the state\n     return (\n         <>\n         <div style={{color: props.mode==='dark'?'white':'black'}}>\n        <div className=\"container\">\n            <h1>{props.heading}</h1>\n         \n            <div className=\"mb-3\">\n            <label htmlFor=\"box\" className=\"form-label\"></label>\n            <textarea className=\"form-control\"  value={text} onChange={handleOnChange} style={{backgroundColor:props.mode === 'dark'?'grey':'white',color: props.mode==='dark'?'white':'black'}} id=\"box\" rows=\"10\"></textarea>\n            </div>\n\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert To Uppercase</button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert To Lowercase</button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleInClick}>Invertcase</button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleCopyClick}>CopyText</button>\n        <button className=\"btn btn-primary mx-2\" onClick={handleSpacesClick}>Remove Extra Spaces</button>\n            \n        </div>\n\n        <div className=\"container my-3\">\n            <h1>Your text summary</h1>\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\n            <p>{0.008 * text.split(\" \").length} minutes read</p>\n            <h2>PREVIEW</h2>\n            <p>{text.length>0?text:'Enter text in above box to preview'}</p>\n\n        </div>\n        </div>\n        </>\n    )\n}\n","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize =(word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\n    }\n    return (\n       \n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n                <strong>{capitalize(props.alert.type)}</strong>{props.alert.msg} \n            \n            </div>\n            \n      \n    )\n}\n\nexport default Alert\n","// import logo from './logo.svg';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar'\nimport Textform from './components/Textform'\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode,setMode]= useState('light')//whether dark mode is enabled or not\n\n   //alert\n   const [alert, setAlert] = useState(null);\n   const showAlert = (message,type)=>{\n     setAlert({\n       msg:message,\n       type:type\n     })\n     setTimeout(() => {\n       setAlert(null)\n     }, 1800);\n   }\n\n  const toggleMode=()=>{\n    if(mode === 'light'){\n      setMode('dark')\n      document.body.style.backgroundColor='grey';\n      showAlert('Dark Mode is enabled','success')\n\n      document.title= 'TextUtils- dark mode'\n      setInterval(()=>{\n        document.title = 'textutils is amazing mode'\n      },2000)\n      setInterval(()=>{\n        document.title = 'Install Textutils NOw'\n      },1500)\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor='white';\n      showAlert('Dark Mode is disabled','Danger')\n    }\n  }\n\n\n \n  return(\n    <>\n    <Router>\n      <Navbar title='klksd' mode={mode} toggleMode={toggleMode}/>\n      {/* <Navbar title='myreact' aboutText='ABOUT us'/> */}\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n\n      <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n          \n            <Textform showAlert={showAlert} heading='enter the text' mode={mode}/>\n          </Route>\n        </Switch>\n\n      {/* <About/> */}\n      </div>\n      </Router>\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}